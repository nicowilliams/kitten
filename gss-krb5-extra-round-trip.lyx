#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Negotiation of Extra Security Context Tokens for Kerberos V5 Generic Security
 Services Mechanism
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-kitten-krb5-extra-rt-05
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
Kerberos Extra AP
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex Updates
status open

\begin_layout Plain Layout
4121
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Author
Roland Charles Dowdeswell
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Dowdeswell Security Architecture
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Dowdeswell Security Architecture
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
elric@imrryr.org
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This Internet-Draft proposes an extension to the Kerberos V5 security mechanism
 for the Generic Security Services Application Programming Interface (GSS-API)
 for using extra security context tokens in order to recover from certain
 errors.
 Other benefits include: user-to-user authentication, authenticated errors,
 replay cache avoidance, and others.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The Kerberos V5 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 AP protocol, and therefore the Kerberos V5 GSS-API 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 mechanism 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 security context token exchange, is a one-round trip protocol.
 Occasionally there are errors that the protocol could recover from by using
 an additional round trip, but until now there was no way to execute such
 an additional round trip.
 For many application protocols the failure of the Kerberos AP protocol
 is fatal, requiring closing TCP connections and starting over; often there
 is no automatic recovery.
\end_layout

\begin_layout Standard
This document proposes a negotiation of additional security context tokens
 for automatic recovery from certain errors.
 This is done in a backwards-compatible way, thus retaining the existing
 mechanism OID for the Kerberos V5 GSS mechanism.
 This also enables other new features.
\end_layout

\begin_layout Standard
New features enabled by this extension include:
\end_layout

\begin_layout Itemize
error recovery (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recoverable-Errors-and"

\end_inset

)
\end_layout

\begin_layout Itemize
user-to-user authentication (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:User-to-User-Authentication"

\end_inset

)
\end_layout

\begin_layout Itemize
some authenticated errors (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Authenticated-Errors"

\end_inset

)
\end_layout

\begin_layout Itemize
replay cache avoidance (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

)
\end_layout

\begin_layout Itemize
acceptor clock skew correction (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Acceptor-Clock-Skew"

\end_inset

)
\end_layout

\begin_layout Itemize
symmetric authorization data flows
\end_layout

\begin_layout Standard
No new interfaces are needed for GSS-API applications to use the features
 added in this document.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
New Protocol Elements
\end_layout

\begin_layout Standard
We introduce the following new protocol elements.
 A partial ASN.1 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
CCITT.X680.2002
\end_layout

\end_inset

 module (for inclusion in the base Kerberos ASN.1 module) is given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ASN.1-for-New"

\end_inset

, and references to its contents are made below.
\end_layout

\begin_layout Itemize
a new ap-options flag for use in the clear-text part of AP-REQs to indicate
 the desire for an extra round trip if need be;
\end_layout

\begin_layout Itemize
a new authorization data (AD) element for integrity protection of ap-options;
\end_layout

\begin_layout Itemize
a new AD element for use in Authenticators for quoting back a challenge
 from the acceptor;
\end_layout

\begin_layout Itemize
a new PDU: KRB-ERROR2, also known as AP-REP2, with additional fields and
 support for integrity- (and confidentiality-)protected errors and optional
 
\emph on
key confirmation
\emph default
:
\end_layout

\begin_deeper
\begin_layout Itemize
a flag is used to indicate which key is used to encrypt the KRB-ERROR2's
 private part, as in some cases there can be two keys to choose from;
\end_layout

\begin_layout Itemize
when no key available for encrypting the private part of a KRB-ERROR2, the
 null enctype is used.
\end_layout

\end_deeper
\begin_layout Standard
These elements are used to construct security context token exchanges with
 potentially more than two context tokens.
\end_layout

\begin_layout Standard
All context tokens are to be prefixed with the InitialContextToken pseudo-ASN.1/D
ER header from RFC2743, section 3.1, just as RFCs 1964 and 4121 require of
 the first two context tokens.
\end_layout

\begin_layout Subsection
Fields of KRB-ERROR2
\end_layout

\begin_layout Standard
The new KRB-ERROR2 PDU is defined in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ASN.1-for-New"

\end_inset

.
 The fields of the KRB-ERROR2 encrypted part have the following purpose/semantic
s:
\end_layout

\begin_layout Description
continue-challenge A challenge to be quoted back in any subsequent context
 tokens.
\end_layout

\begin_layout Description
stime The acceptor's current time.
\end_layout

\begin_layout Description
susec Microsecond portion of the acceptor's current time.
\end_layout

\begin_layout Description
subkey The acceptor's sub-session key.
 This MUST be absent when the KRB-ERROR2 enc-part is 
\begin_inset Quotes eld
\end_inset

encrypted
\begin_inset Quotes erd
\end_inset

 in the null enctype and key or when the acceptor failed to decrypt the
 initiator's Authenticator (but, obviously, succeeded at decrypting the
 Ticket); otherwise it MUST be present.
\end_layout

\begin_layout Description
seq-number The acceptor's initial per-message token sequence number.
 This MUST be absent when the subkey is absent; otherwise it MUST be present.
\end_layout

\begin_layout Description
error-code When zero-valued, the KRB-ERROR2 is not an error token, but a
 key-confirmation that requires continuation with an additional AP-REQ.
\end_layout

\begin_layout Description
e-flags Indicates whether the KRB-ERROR2 is final (error token) or not.
\end_layout

\begin_layout Description
e-text A human-readable string (in any language and script) description
 of the error, if any.
\end_layout

\begin_layout Description
e-data Currently unused but specified for extensibility reasons.
 SHOULD be absent and MUST be ignored.
\end_layout

\begin_layout Description
e-typed-data TYPED-DATA; see 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

.
 Currently unused but specified for extensibility reasons.
 SHOULD be absent and MUST be ignored.
\end_layout

\begin_layout Description
your-addresses The initiator's network address(es) as seen on the acceptor
 side.
 Currently unused due to insufficient GSS-API interfaces, but specified
 for extensibility reasons.
 SHOULD be absent, MUST be ignored.
\end_layout

\begin_layout Description
ad-data Authorization-data.
 This is intended for symmetry, so that acceptors can assert authorization
 data to the initiator just as the initiator can assert authorization data
 to the acceptor.
 (For example, this might be useful in user-to-user authentication.) When
 present this has the same semantics as in the AP-REQ's Authenticator, but
 in the opposite direction.
\end_layout

\begin_layout Description
tgt A TGT for use in user-to-user authentication.
\end_layout

\begin_layout Subsection
Distinction between KRB-ERROR2 and AP-REP2 PDUs
\end_layout

\begin_layout Standard
The ASN.1 does not distinguish between KRB-ERROR2 and AP-REP2 PDUs.
 A KRB-ERROR2 can serve either or both, the purpose of conveying error informati
on, as well as the purpose of completing the acceptor's side of the context
 token exchange and providing key confirmation.
 We could have used three distinct PDUs instead of one.
\end_layout

\begin_layout Standard
It is true that a KRB-ERROR2 that only serves the purpose of final key confirmat
ion without continuation could have a different ASN.1 type for its encrypted
 part, and a different application tag, however, there seems to be little
 value in this.
 Distinguishing between errors with and without key confirmation is even
 less valuable.
 Therefore we do not distinguish these three possible PDUs.
\end_layout

\begin_layout Section
Negotiation and Use of Extra Context Tokens
\end_layout

\begin_layout Standard
In the following text 
\begin_inset Quotes eld
\end_inset

initiator
\begin_inset Quotes erd
\end_inset

 refers to the mechanism's initiator functionality (invoked via GSS_Init_sec_con
text()), and 
\begin_inset Quotes eld
\end_inset

acceptor
\begin_inset Quotes erd
\end_inset

 refers to the mechanism's acceptor functionality (invoked via GSS_Accept_sec_co
ntext()).
\end_layout

\begin_layout Standard
To use this feature, the Kerberos GSS mechanism MUST act as follows:
\end_layout

\begin_layout Itemize
To request this feature, initiators SHALL add the new ap-options flag to
 their AP-REQs.
\end_layout

\begin_deeper
\begin_layout Itemize
And the initiators SHALL repeat the ap-options in the new AD-AP-OPTIONS
 AD type in the Authenticator.
\end_layout

\end_deeper
\begin_layout Itemize
Acceptors that wish to request an additional security context token can
 only do so when initiators indicate support for it, and MUST do so by returning
 a KRB-ERROR2.
 The encrypted part of the KRB-ERROR2 SHALL be encrypted in a key derived
 (with key usage <TBD>) from one of the following keys: the sub-session
 key from the AP-REQ's Authenticator (use-initiator-subkey) if it could
 be decrypted, else the session key from the Ticket (use-ticket-session-key),
 if it could be decrypted, else the null enc-type/key (use-null-enctype).
\end_layout

\begin_layout Itemize
Any KRB-ERROR2 emitted by the acceptor SHALL have the continue-needed e-flag
 set when the GSS_Accept_sec_context() returns GSS_S_CONTINUE_NEEDED to
 the application, and in this case the token ID SHALL be 02 00 (KRB_AP_REP,
 even though the token isn't actually an AP-REP) (see 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 section 4.1).
\end_layout

\begin_layout Itemize
When it consumes a KRB-ERROR2, GSS_Init_sec_context() can return an error
 (GSS_S_FAILURE) and optionally output an error token, or it can attempt
 recovery (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recoverable-Errors-and"

\end_inset

) and output a new AP-REQ security context token.
\end_layout

\begin_deeper
\begin_layout Itemize
Any error token output by GSS_Init_sec_context() MUST be a KRB-ERROR2, and
 GSS_Init_sec_context() MUST return GSS_S_FAILURE.
\end_layout

\begin_layout Itemize
The initiator MUST quote the challenge from the KRB-ERROR2 using an AD-CONTINUE-
CHALLENGE (see below) authorization data element in any AP-REQ or KRB-ERROR2
 response to the acceptor's KRB-ERROR2.
\end_layout

\begin_layout Itemize
When GSS_Init_sec_context() outputs a new AP-REQ security context token,
 it SHALL return GSS_S_CONTINUE_NEEDED if the application requested mutual
 authentication and the previous acceptor security context token was a recoverab
le error (rather than a request for one more AP-REQ), else it SHALL return
 GSS_S_COMPLETE.
\end_layout

\begin_layout Itemize
When GSS_Init_sec_context() returns an error and the acceptor is awaiting
 a security context token, GSS_Init_sec_context() MAY generate a KRB-ERROR2
 or KRB-ERROR to send to the acceptor.
\end_layout

\end_deeper
\begin_layout Itemize
Acceptors MUST reject additional AP-REQs which do not have a challenge response
 nonce matching the one sent by the acceptor in the previous KRB-ERROR2.
\end_layout

\begin_layout Itemize
Acceptors MUST reject initial security context tokens that contain a challenge
 response nonce.
\end_layout

\begin_layout Itemize
When GSS_Accept_sec_context() returns an error and outputs an error token,
 the token MUST be either a KRB-ERROR or a KRB-ERROR2, with the latter having
 the continue-needed flag cleared.
\end_layout

\begin_layout Standard
All non-recoverable KRB-ERROR2 tokens SHALL use the token ID 03 00.
\end_layout

\begin_layout Standard
Additional AP-REQs produced by the authenticator MUST have the mutual-required
 ap-options flag set when a) the application requested mutual authentication,
 and b) the acceptor's KRB-ERROR2 did not supply the required key confirmation.
 The acceptor MUST respond to the client's last AP-REQ with an AP-REP when
 the mutual-required ap-options flag is set or when the GSS_C_MUTUAL_FLAG
 is set in the 
\begin_inset Quotes eld
\end_inset

checksum 0x8003
\begin_inset Quotes erd
\end_inset

, otherwise GSS_Accept_sec_context() MUST NOT produce a response token when
 it returns GSS_S_COMPLETE.
\end_layout

\begin_layout Subsection
Number of Security Context Tokens
\end_layout

\begin_layout Standard
The first AP-REQ may well result in an error; the second generally should
 not.
 Therefore acceptors SHOULD return a fatal error when a second error results
 in one security context establishment attempt, except when the first error
 is that the initiator should use user-to-user authentication.
 This limits the maximum number of round trips to two (not user-to-user)
 or three (user-to-user).
\end_layout

\begin_layout Standard
The mechanism SHOULD impose some limit on the maximum number of security
 context tokens.
 For the time being that limit is six.
\end_layout

\begin_layout Standard
Note that in the user-to-user cases (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:User-to-User-Authentication"

\end_inset

) it's possible to have up to three round trips under normal conditions
 if, for example, the acceptor wishes to avoid the use of replay caches
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

), or if the initiator's clock is too skewed, for example.
\end_layout

\begin_layout Subsection
Possible Context Token Sequences
\end_layout

\begin_layout Standard
The following successful security context token exchange sequences are possible:
\end_layout

\begin_layout Itemize
One token (per-RFC4121; mutual authentication not requested): AP-REQ.
\end_layout

\begin_deeper
\begin_layout Itemize
In principle this can yield an error token in the case of errors, per-RFC2743.
\end_layout

\end_deeper
\begin_layout Itemize
Two tokens (per-RFC4121; mutual authentication requested): AP-REQ and AP-REP.
\end_layout

\begin_layout Itemize
Two tokens (per-RFC4121; mutual authentication requested): AP-REQ and KRB-ERROR.
\end_layout

\begin_layout Itemize
Two tokens (per-RFC4121; mutual authentication requested): AP-REQ and KRB-ERROR2
 (non-recoverable error, or recoverable error but the acceptor mechanism
 is configured to not continue).
\end_layout

\begin_layout Itemize
Two tokens (per-RFC4121; mutual authentication requested): AP-REQ and KRB-ERROR2
 (recoverable error for the acceptor, but not for the initiator, or the
 initiator application abandons the partially-established security context).
\end_layout

\begin_layout Itemize
Three tokens: AP-REQ, KRB-ERROR2 (recoverable error), AP-REQ.
\end_layout

\begin_deeper
\begin_layout Itemize
The initiator indicates it supports multiple round trips, and a recoverable
 error results on the acceptor side.
\end_layout

\begin_layout Itemize
Either the initiator did not request mutual authentication, or the KRB-ERROR2
 supplied the necessary key confirmation.
\end_layout

\end_deeper
\begin_layout Itemize
Three tokens: AP-REQ, KRB-ERROR2 (no error, continue needed), AP-REQ.
\end_layout

\begin_deeper
\begin_layout Itemize
The initiator indicates it supports multiple round trips, and its Authenticator
 and Ticket decrypt correctly on the acceptor side, but the acceptor wants
 to continue, e.g., to avoid the need for a replay cache (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

).
\end_layout

\begin_layout Itemize
This can happen in any recoverable error case where the initiator's Authenticato
r (and Ticket) decrypt successfully on the acceptor side.
\end_layout

\end_deeper
\begin_layout Itemize
Four tokens: AP-REQ, KRB-ERROR2 (recoverable error), AP-REQ, AP-REP.
\end_layout

\begin_deeper
\begin_layout Itemize
The initiator wanted mutual authentication and a recoverable error occurred
 where the KRB-ERROR2 could not provide key confirmation, leading to the
 second round trip.
\end_layout

\begin_layout Itemize
This can happen in any recoverable error case where the initiator's Authenticato
r did not decrypt successfully.
\end_layout

\begin_layout Itemize
This can also happen in the user-to-user case.
\end_layout

\begin_layout Itemize
This case provides replay cache avoidance without a fifth token because
 the acceptor provides a challenge in its first (KRB-ERROR2) token and the
 initiator completes the challenges in its second token.
\end_layout

\end_deeper
\begin_layout Itemize
Five tokens: AP-REQ, KRB-ERROR2 (with user-to-user TGT), AP-REQ, KRB-ERROR2
 (recoverable error), AP-REQ.
\end_layout

\begin_deeper
\begin_layout Itemize
The initiator does not want mutual authentication, the acceptor wants user-to-us
er authentication, and the initiator's second AP-REQ elicits a recoverable
 error.
\end_layout

\end_deeper
\begin_layout Itemize
Six tokens: AP-REQ, KRB-ERROR2 (with user-to-user TGT), AP-REQ, KRB-ERROR2
 (recoverable error), AP-REQ, AP-REP.
\end_layout

\begin_deeper
\begin_layout Itemize
The initiator wants mutual authentication, the acceptor wants user-to-user
 authentication, and the initiator's second AP-REQ elicits a recoverable
 error; none of the KRB-ERROR2 tokens was a key-confirmation token.
\end_layout

\end_deeper
\begin_layout Standard
Other context token sequences might be possible in the future.
\end_layout

\begin_layout Standard
In the above sequences the AP-REP tokens can be AP-REP2 tokens as well.
\end_layout

\begin_layout Subsection
Per-Message Token Sequence Numbers
\end_layout

\begin_layout Standard
As in 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

, It is REQUIRED that each real AP-REQ in a single security token exchange
 specify the same start sequence number as preceding AP-REQs in the same
 security context token exchange.
 (AP-REQs in some user-to-user cases aren't 
\begin_inset Quotes eld
\end_inset

real
\begin_inset Quotes erd
\end_inset

.)
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Early-PROT_READY-State"

\end_inset

Early PROT_READY State
\end_layout

\begin_layout Standard
The GSS-API allows security mechanisms to support the use of per-message
 tokens prior to full security context establishment.
 In this section we'll call this 
\begin_inset Quotes eld
\end_inset

early PROT_READY
\begin_inset Quotes erd
\end_inset

.
 Early PROT_READY is optional for the GSS-API and for implementations of
 mechanisms that support it.
\end_layout

\begin_layout Standard
The Kerberos V GSS mechanism supports this in the two-token exchange, with
 the initiator being PROT_READY before consuming the AP-REP.
 This extension also supports early PROT_READY, which works as follows:
\end_layout

\begin_layout Enumerate
The initiator asserts a sub-session key in each AP-REQ that does not follow
 a key-confirmation KRB-ERROR2, and GSS_Init_sec_context() sets the prot_ready_s
tate return flag on the first call.
\end_layout

\begin_deeper
\begin_layout Enumerate
If there are multiple such AP-REQs in a security context token exchange,
 then each such AP-REQ must assert the same sub-session key.
\end_layout

\begin_layout Enumerate
Subsequent AP-REQs need not carry a sub-session key; acceptors MUST ignore
 sub-session keys from subsequent AP-REQs.
\end_layout

\end_deeper
\begin_layout Enumerate
GSS_Accept_sec_context() MUST NOT set the prot_ready_state return flag until
 it has successfully decrypted an AP-REQ's Ticket and Authenticator from
 the initiator.
 If the acceptor requests additional context tokens and signals PROT_READY
 at that point, then it too will be PROT_READY.
\end_layout

\begin_layout Standard
Replay protection for early prot_ready per-message tokens depends on the
 initiator always generating a fresh sub-session key for every security
 context's initial context token, on the acceptor always generating a fresh
 sub-session key for its key confirmation token, and on either a replay
 cache or the challenge/response token provided for in this document:
\end_layout

\begin_layout Itemize
An attacker cannot replay an early per-message token without also replaying
 the corresponding initial security context token (as otherwise the initiator-as
serted sub-session keys won't match), and replay protection for the initial
 security context token provides replay protection for any subsequent early
 per-message tokens.
\end_layout

\begin_layout Itemize
Per-message tokens made after full security context establishment are protected
 against replay by the use of the acceptor's sub-session key hierarchy (since
 the initiator must then use that key).
\end_layout

\begin_layout Itemize
AP-REPs and key-confirmation KRB-ERROR2s are protected against replays to
 initiators by the use of the initiator's sub-session key.
\end_layout

\begin_layout Itemize
Initial security context tokens (and error-recovery AP-REQs) are protected
 against replay either by a replay cache on the acceptor side, or by the
 use of additional context tokens for challenge/response replay cache avoidance
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

).
\end_layout

\begin_layout Standard
Note that the acceptor must, as usual, check for missing per-message tokens,
 using sequence numbering to do so, and must indicate that per-message tokens
 are missing (when they are).
\end_layout

\begin_layout Standard
Note too that when a security context token exchange involves two key confirmati
on KRB-ERROR2 PDUs the acceptor can also be PROT_READY early.
 In this case the acceptor should use the acceptor sub-session key for its
 early PROT_READY tokens.
\end_layout

\begin_layout Standard
Note too that there is no interface by which applications can check whether
 a given per-message token was made before full security context establishment.
 All the application can do is observe that the security context eventually
 becomes fully established (or establishment fails), that per-message tokens
 arrive in order.
 Depending on the application protocol it may or may not be possible to
 determine exactly whether a per-message token was made before or after
 full security context establishment on the peer's side.
\end_layout

\begin_layout Standard
Early PROT_READY per-message token support is OPTIONAL for GSS_Wrap() and
 GSS_GetMIC(), but REQUIRED for GSS_Unwrap() and GSS_VerifyMIC().
\end_layout

\begin_layout Subsection
Other Requirements, Recommendations, and Non-Requirements
\end_layout

\begin_layout Standard
All error PDUs in an AP exchange where the AP-REQ has the continue-needed-ok
 ap-options flag MUST be KRB-ERROR2 PDUs.
\end_layout

\begin_layout Standard
Whenever an acceptor is able to decrypt the Ticket from an AP-REQ and yet
 wishes or has to output a KRB-ERROR2, then the enc-part of the KRB-ERROR2
 MUST be encrypted in either the initiator's sub-session key (from the Authentic
ator) or the Ticket's session key (if the acceptor could not decrypt the
 Authenticator).
\end_layout

\begin_layout Standard
Acceptors MUST reject initial security context tokens that contain a challenge
 response in either their Authenticator or Ticket.
 This prevents cut-n-paste attacks where the attacker replays the middle
 of another security context token exchange.
\end_layout

\begin_layout Subsection
Security Analysis
\end_layout

\begin_layout Standard
Attacks that are defeated:
\end_layout

\begin_layout Itemize
replays of initial security context tokens (via replay caches and/or additional
 context tokens; see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

);
\end_layout

\begin_layout Itemize
replays of additional security context tokens to acceptors (via the continue-cha
llenge);
\end_layout

\begin_layout Itemize
replays of AP-REP and key confirmation KRB-ERROR2 context tokens to initiators
 (via the use of the initiator's sub-session key for key confirmation, and
 because the initiator can check for such replays in exchanges with more
 than two acceptor-produced security context tokens);
\end_layout

\begin_layout Itemize
replays of early PROT_READY per-message tokens (with deferred detection;
 see
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Early-PROT_READY-State"

\end_inset

);
\end_layout

\begin_layout Itemize
out of order delivery of security context tokens (impossible due to the
 synchronous nature of the GSS-API context token exchange);
\end_layout

\begin_layout Itemize
modifications of Encrypted-Data payloads in security context tokens (this
 is provided by the Kerberos cryptographic framework 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC3961
\end_layout

\end_inset

);
\end_layout

\begin_layout Itemize
cut-n-paste attacks from one context token exchange to another (but see
 below about unauthenticated error tokens, and see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

);
\end_layout

\begin_layout Itemize
non-delivery of any early PROT_READY per-message tokens is detected through
 the use of sequence numbers as usual.
\end_layout

\begin_layout Standard
Attacks not detected/defeated:
\end_layout

\begin_layout Itemize
replacement of unauthenticated KRB-ERROR and KRB-ERROR2 PDUs, but successful
 continuation requires that the attacker show the initiator the acceptor's
 continue-challenge.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:ASN.1-for-New"

\end_inset

ASN.1 Module for New Protocol Elements
\end_layout

\begin_layout Standard
A partial ASN.1 module appears below.
 This ASN.1 is to be used as if it were part of the base Kerberos ASN.1 module
 (see RFC4120), therefore the encoding rules to be used are the Distinguished
 Encoding Rules (DER) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
CCITT.X690.2002
\end_layout

\end_inset

, and the environment is one of explicit tagging.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 KerberosExtraContextTokens DEFINITIONS EXPLICIT TAGS ::=
\end_layout

\begin_layout Plain Layout

 BEGIN
\end_layout

\begin_layout Plain Layout

 EXPORTS ad-continue-challenge,
\end_layout

\begin_layout Plain Layout

         AD-CONTINUE-CHALLENGE,
\end_layout

\begin_layout Plain Layout

         KrbErrorEncPartFlags,
\end_layout

\begin_layout Plain Layout

         KRB-ERROR2,
\end_layout

\begin_layout Plain Layout

         ErrorFlags;
\end_layout

\begin_layout Plain Layout

 IMPORTS UInt32, Int32, KerberosTime,
\end_layout

\begin_layout Plain Layout

         Microseconds, KerberosFlags,
\end_layout

\begin_layout Plain Layout

         Checksum, EncryptedData,
\end_layout

\begin_layout Plain Layout

         EncryptionKey, KerberosString,
\end_layout

\begin_layout Plain Layout

         AuthorizationData, TYPED-DATA,
\end_layout

\begin_layout Plain Layout

         HostAddresses, Ticket FROM KERBEROS5; 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 APOptions       ::= KerberosFlags
\end_layout

\begin_layout Plain Layout

         -- reserved(0),
\end_layout

\begin_layout Plain Layout

         -- use-session-key(1),
\end_layout

\begin_layout Plain Layout

         -- mutual-required(2),
\end_layout

\begin_layout Plain Layout

         -- continue-needed-ok(TBD)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 -- Challenge (for use in Authenticator)
\end_layout

\begin_layout Plain Layout

 ad-continue-challenge     Int32 ::= -5 -- <TBD>
\end_layout

\begin_layout Plain Layout

 AD-CONTINUE-CHALLENGE ::= OCTET STRING
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 -- AP options, integrity-protected
\end_layout

\begin_layout Plain Layout

 ad-ap-options             Int32 ::= -6 -- <TBD>
\end_layout

\begin_layout Plain Layout

 AD-AP-OPTIONS         ::= KerberosFlags
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 KrbErrorEncPartFlags ::= ENUMERATED {
\end_layout

\begin_layout Plain Layout

         use-null-enctype(0),
\end_layout

\begin_layout Plain Layout

         use-initiator-subkey(1),
\end_layout

\begin_layout Plain Layout

         use-ticket-session-key(2),
\end_layout

\begin_layout Plain Layout

         ...
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 -- Application tag TBD
\end_layout

\begin_layout Plain Layout

 KRB-ERROR2          ::= [APPLICATION 55] SEQUENCE {
\end_layout

\begin_layout Plain Layout

         pvno            [0] INTEGER (5),
\end_layout

\begin_layout Plain Layout

         msg-type        [1] INTEGER (55), -- TBD
\end_layout

\begin_layout Plain Layout

         enc-part-key    [2] KrbErrorEncPartFlags,
\end_layout

\begin_layout Plain Layout

         enc-part        [3] EncryptedData -- EncKRBErrorPart
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 -- Alias type name
\end_layout

\begin_layout Plain Layout

 AP-REP2             ::= KRB-ERROR2
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 ErrorFlags ::= ENUMERATED {
\end_layout

\begin_layout Plain Layout

         final(0),
\end_layout

\begin_layout Plain Layout

         continue-needed(1),
\end_layout

\begin_layout Plain Layout

         ...
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 -- Application tag TBD
\end_layout

\begin_layout Plain Layout

 EncKRBErrorPart    ::= [APPLICATION 56] SEQUENCE {
\end_layout

\begin_layout Plain Layout

         continue-challenge  [0]  AD-CONTINUE-CHALLENGE,
\end_layout

\begin_layout Plain Layout

         stime               [1]  KerberosTime,
\end_layout

\begin_layout Plain Layout

         susec               [2]  Microseconds,
\end_layout

\begin_layout Plain Layout

         subkey              [3]  EncryptionKey OPTIONAL,
\end_layout

\begin_layout Plain Layout

         seq-number          [4]  UInt32 OPTIONAL,
\end_layout

\begin_layout Plain Layout

         error-code          [5]  Int32,
\end_layout

\begin_layout Plain Layout

         e-flags             [6]  ErrorFlags,
\end_layout

\begin_layout Plain Layout

         e-text              [7]  UTF8String OPTIONAL,
\end_layout

\begin_layout Plain Layout

         e-data              [8]  OCTET STRING OPTIONAL,
\end_layout

\begin_layout Plain Layout

         e-typed-data        [9]  TYPED-DATA OPTIONAL,
\end_layout

\begin_layout Plain Layout

         -- For recovery from KRB_AP_ERR_BADADDR:
\end_layout

\begin_layout Plain Layout

         your-addresses      [10] HostAddresses OPTIONAL,
\end_layout

\begin_layout Plain Layout

         ad-data             [11] AuthorizationData OPTIONAL,
\end_layout

\begin_layout Plain Layout

         tgt                 [12] Ticket OPTIONAL, -- for user2user
\end_layout

\begin_layout Plain Layout

         ...
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 END
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
ASN.1 module (with explicit tagging)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Recoverable-Errors-and"

\end_inset

Recoverable Errors and Error Recovery
\end_layout

\begin_layout Standard
Error recovery is REQUIRED to implement, as it is the primary purpose of
 this specification.
\end_layout

\begin_layout Standard
The following Kerberos errors can be recovered from automatically using
 this protocol:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_TKT_EXPIRED: the initiator SHOULD attempt to get a new service
 ticket;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_TKT_NYV: the initiator SHOULD attempt to get a new service ticket;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_REPEAT: the initiator SHOULD build a new AP-REQ;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_SKEW: see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Acceptor-Clock-Skew"

\end_inset

;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADKEYVER: the initiator MUST attempt to get a new service ticket;
\end_layout

\begin_layout Itemize
KRB_AP_PATH_NOT_ACCEPTED: the initiator MAY attempt to get a new service
 ticket using a different transit path;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_INAPP_CKSUM: the initiator MAY try again with a different checksum
 type.
\end_layout

\begin_layout Standard
Error codes that denote PDU corruption (and/or an active attack) can also
 be recovered from by attempting a new AP-REQ, though subsequent AP-REQs
 may fail for the same reason:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BAD_INTEGRITY
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADVERSION
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADMATCH
\end_layout

\begin_layout Itemize
KRB_AP_ERR_MSG_TYPE
\end_layout

\begin_layout Itemize
KRB_AP_ERR_MODIFIED
\end_layout

\begin_layout Standard
Initiators MAY try again in the case of such errors.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Authenticated-Errors"

\end_inset

Authenticated Errors
\end_layout

\begin_layout Standard
The following errors, at least, can be authenticated in AP exchanges, and
 acceptors implementing this specification MUST authenticate these errors
 when the initiator indicates support for this feature.:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_TKT_EXPIRED
\end_layout

\begin_layout Itemize
KRB_AP_ERR_TKT_NYV
\end_layout

\begin_layout Itemize
KRB_AP_ERR_REPEAT
\end_layout

\begin_layout Itemize
KRB_AP_ERR_SKEW
\end_layout

\begin_layout Itemize
KRB_AP_PATH_NOT_ACCEPTED
\end_layout

\begin_layout Itemize
KRB_AP_ERR_INAPP_CKSUM
\end_layout

\begin_layout Standard
The following error could be authenticated in a non-GSS-API context:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADADDR
\end_layout

\begin_layout Standard
In practice the Kerberos V GSS mechanism cannot produce KRB_AP_ERR_BADADDR,
 since the mechanism has no access to the initiator's apparent network address(e
s).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:Replay-Cache-Avoidance"

\end_inset

Replay Cache Avoidance
\end_layout

\begin_layout Standard
By using an additional AP-REQ and a challenge/response nonce, this protocol
 is immune to replays of AP-REQ PDUs and does not need a replay cache.
 Acceptor implementations MUST not insert Authenticators from extra round
 trips into a replay cache when there are no other old implementations on
 the same host (and with access to the same acceptor credentials) that ignore
 critical authorization data or which don't know to reject initial AP-REQs
 that contain a challenge response nonce.
\end_layout

\begin_layout Standard
In the replay cache avoidance case where there's no actual error (e.g., time
 skew) the acceptor's KRB-ERROR2 will have KDC_ERR_NONE as the error code,
 with the continue-needed e-flag.
\end_layout

\begin_layout Subsection
Replay Cache Avoidance without Extensions
\end_layout

\begin_layout Standard
Many Kerberos services can avoid the use of a replay cache altogether, but
 it's tricky to know when it's safe to do so.
 For Kerberos it's safe to not use a replay cache for AP-REQs/Authenticators
 when either:
\end_layout

\begin_layout Itemize
the application doesn't require replay detection at all and
\end_layout

\begin_deeper
\begin_layout Itemize
no other acceptor/service application shares the same long-term service
 keys for its service principal
\end_layout

\end_deeper
\begin_layout Standard
or
\end_layout

\begin_layout Itemize
the application protocol always has the initiator/client send the first
 per-message token (or KRB-SAFE/PRIV PDU) which can then function as a challenge
 response, and
\end_layout

\begin_deeper
\begin_layout Itemize
no other acceptor/service application shares the same long-term service
 keys for its service principal
\end_layout

\end_deeper
\begin_layout Standard
It is difficult to establish the second part of the above conjunctions programma
tically.
 In practice this is best left as a local configuration matted on a per-service
 name basis.
\end_layout

\begin_layout Standard
For example, it's generally safe for NFSv4 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC3530
\end_layout

\end_inset

 to not use a replay cache for the Kerberos GSS mechanism, but it is possible
 for multiple Kerberos host-based service principals on the same host to
 share the same keys, therefore in practice, the analysis for NFSv4 requires
 more analysis.
 The same is true for SSHv2 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4251
\end_layout

\end_inset

 (SSHv2 implementations share the same service principal as other non-GSS
 Kerberos applications that do sometimes need a replay cache).
\end_layout

\begin_layout Standard
Acceptor implementations SHOULD provide a way to configure the non-use of
 replay caches for specific (or all) services on a given host.
\end_layout

\begin_layout Subsection
Analysis
\end_layout

\begin_layout RevisionRemark
There is no portable, programmatic way to check whether all applications
 and Kerberos implementations using a given service principal (or its long-term
 keys) are safe in the absence of a replay cache.
 This is because even if an application protocol is generally replay-safe
 (see above) AP-REQ tokens from its context token exchanges might be played
 by an active attacker against a different service with access to the same
 service principal or its long-term keys.
 If only all currently-deployed Kerberos implementations had implemented
 authorization data as critical (unless otherwise specified or wrapped),
 then it would be possible to prevent this cut-n-paste attack.
\end_layout

\begin_layout Standard
In some common deployments replay-safety can be assumed; in others it cannot.
 Replay safety, and thus the ability to avoid the use of replay caches,
 is a matter for local configuration.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:User-to-User-Authentication"

\end_inset

User-to-User Authentication
\end_layout

\begin_layout Standard
There are two user2user authentication cases:
\end_layout

\begin_layout Enumerate
the KDC only allows a service principal to use user2user authentication,
\end_layout

\begin_layout Enumerate
the service principal does not know its long-term keys or otherwise wants
 to use user2user authentication even though the KDC vended a service ticket.
\end_layout

\begin_layout Standard
In the first case the initiator knows this because the KDC returns KDC_ERR_MUST_
USE_USER2USER.
 The initiator cannot make a valid AP-REQ in this case, yet it must send
 some sort of initial security context token! For this case we propose that
 the initiator make an AP-REQ with a Ticket with zero-length enc-part (and
 null enctype) and a zero-length authenticator (and null enctype).
 The acceptor will fail to process the AP-REQ, of course, and SHOULD respond
 with a continue-needed KRB-ERROR2 (using the null enc-type for the enc-part)
 that includes a TGT for the acceptor.
\end_layout

\begin_layout Standard
In the second case the initiator does manage to get a real service ticket
 for the acceptor but the acceptor nonetheless wishes to use user2user authentic
ation.
\end_layout

\begin_layout Standard
In both cases the acceptor responds with a KRB-ERROR2 with the KRB_AP_ERR_USER_T
O_USER_REQUIRED error code and including a TGT for itself.
\end_layout

\begin_layout Standard
In both cases the initiator then does a TGS request with a second ticket
 to get a new, user2user Ticket.
 Then the initiator makes a new AP-REQ using the new Ticket, and proceeds.
\end_layout

\begin_layout Standard
This extension renders it unnecessary to have a separate mechanism (e.g.,
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.swift-win2k-krb-user2user
\end_layout

\end_inset

) for user-to-user authentication.
 But if an initiator that supports this extension attempts to initiate a
 security context using this mechanism with an acceptor that only supports
 user-to-user authentication via 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.swift-win2k-krb-user2user
\end_layout

\end_inset

, then the context will fail to establish.
 The acceptor, of course, won't have offered the Kerberos mechanism, therefore
 no interoperability problem arises.
\end_layout

\begin_layout Standard
This feature is RECOMMENDED to implement.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Acceptor-Clock-Skew"

\end_inset

Acceptor Clock Skew Correction
\end_layout

\begin_layout Standard
An initiator in possession of a (short-lived) valid service ticket for a
 given service principal...
 must have had little clock skew relative to the service principal's realm's
 KDC(s), or the initiator must have been able to correct its local clock
 skew.
 But the acceptor's clock might be skewed, yielding a KRB_AP_ERR_SKEW error
 with a challenge.
 The client could recover from this by requesting a new service ticket with
 this challenge as an authorization data element.
 The acceptor should be able to verify this in the subsequent AP-REQ, and
 then it should be able to detect that its clock is skewed and to estimate
 by how much.
\end_layout

\begin_layout Standard
It's unclear how valuable this feature might be, therefore, for now, it
 is entirely OPTIONAL to implement.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
This document deals with security.
 All the security considerations of Kerberos 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 apply.
\end_layout

\begin_layout Standard
The new KRB-ERROR2 PDU is cryptographically distinguished from the original
 mechanism's acceptor success security context token (AP-REQ).
\end_layout

\begin_layout Standard
Not every KRB-ERROR2 can be integrity protected.
 This is unavoidable.
\end_layout

\begin_layout Standard
Because in the base Kerberos V5 GSS-API security mechanism all errors are
 unauthenticated, and because even with this specification some elements
 are unauthenticated, it is possible for an attacker to cause one peer to
 think that the security context token exchange has failed while the other
 thinks it will continue.
 This can cause an acceptor to waste resources while waiting for additional
 security context tokens from the initiator.
 This is not really a new problem, however: acceptor applications should
 already have suitable timeouts on security context establishment.
\end_layout

\begin_layout Standard
There is a binding of preceding security context tokens in each additional
 AP-REQ, via the challenge-response nonce.
 This binding is relatively weak, and does not detect all modifications
 of unauthenticated plaintext in preceding security context tokens.
 There is not a lot of unauthenticated plaintext in these security context
 tokens, thankfully.
 Unauthenticated error tokens, in particular, are not bound.
\end_layout

\begin_layout RevisionRemark
We could use the GSS_EXTS_FINISHED extension from draft-ietf-kitten-iakerb
 to implement a strong binding of all preceding context tokens in a given
 exchange.
\end_layout

\begin_layout Standard
Early prot_ready per-message tokens have security considerations that are
 beyond the scope of this document and which are not exhaustively described
 elsewhere yet, though no new security considerations are added here.
 Use early prot_ready per-message tokens with care, noting in particular
 that neither the state of authentication of the peer, nor the replay detection
 state of such tokens, is yet established when they are made and consumed.
 The status of early per-message tokens cannot be fully ascertained until
 full security context establishment.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout RevisionRemark
Various allocations are required...
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2743"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4120"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4121"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "x680"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml2/reference.CCITT.X680.2002.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "x690"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml2/reference.CCITT.X690.2002.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc3530"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3530.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc3961"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3961.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4251"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4251.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status open

\begin_layout Plain Layout
<reference anchor='I-D.swift-win2k-krb-user2user'> <front> <title>User to
 User Kerberos Authentication using GSS-API</title> <author initials='M.'
 surname='Swift' fullname='Michael Swift'> <organization/> </author> <author
 initials='J.' surname='Brezak' fullname='John Brezak'> <organization/> </author>
 <author initials='P.' surname='Moore' fullname='Patrick Moore'> <organization/>
 </author> <date month='February' day='21' year='2011' /> <abstract><t>The
 security model of the web platform has evolved over time to meet the needs
 of new applications and to correct earlier mistakes.
 Although web security has evolved largely organically, the security model
 has converged towards a handful of key concepts.
 This document presents those concepts and provides advice to designers
 of new pieces of the web platform.</t></abstract> </front> <seriesInfo name='Int
ernet-Draft' value='draft-swift-win2k-krb-user2user-03' /> <format type='TXT'
 target='http://www.ietf.org/internet-drafts/draft-swift-win2k-krb-user2user-03.txt
' /> </reference>
\end_layout

\end_inset


\end_layout

\end_body
\end_document
